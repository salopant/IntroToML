"0","KmeansMod2 <- function(obs,K,labels)"
"0","{"
"0","  #modified version, now initialize the clusters with first instance if each K labels"
"0","  #Now it is more probable that each ith centroid will represent label i (not necessarily)"
"0","  "
"0","  #obs is a nxm matrix, with n observations and m features for each observation"
"0","  "
"0","  #Randomly assign a number, from 1 to K, to each of the observations. "
"0","  #These serve as initial cluster assignments for the observations."
"0","  "
"0","  #clt is a list of clusters, clusters represented as lists"
"0","  #each list item is a list of indices of the original list (row indices) of observations"
"0","  nobs <- dim(obs)[1]"
"0","  nfeat <- dim(obs)[2]"
"0","  clt <- sample(x=1:K, size=nobs, replace=TRUE)"
"0","  #initialize data structure for centroids"
"0","  cent <- matrix(0,nrow = K, ncol = nfeat)"
"0","  count <- 0"
"0","  #initialize the clusters with first instance of each K labels"
"0","  for (i in 1:K)"
"0","  {"
"0","    j <- 1"
"0","    #search for first occurrence of this label i"
"0","    while(labels[j] != (i-1))"
"0","    {"
"0","      j = j + 1"
"0","    }"
"0","    #set jth observation into cluster i"
"0","    clt[j] = i"
"0","    #set observation j as the centroid of cluster with label i"
"0","    cent[i,] <- obs[j,]"
"0","  }"
"0","  changed = TRUE"
"0","   "
"0","  while (changed && (count < 100)) "
"0","  {   "
"0","    changed = FALSE"
"0","    oldclt <- clt"
"0","    #(a) For each of the K clusters, compute the cluster centroid. "
"0","    #The kth cluster centroid is the vector of the p feature means "
"0","    #for the observations in the kth cluster."
"0","    for (i in 1:K)"
"0","    {"
"0","      #centroid of this cluster"
"0","      rows <- which(clt==i)"
"0","      if (length(rows) > 1)"
"0","      {"
"0","        cent[i,] <- colMeans(obs[rows,], na.rm = FALSE, dims = 1)"
"0","      }"
"0","      else"
"0","      {"
"0","        cent[i,] <- obs[rows[1],]"
"0","      }"
"0","    }"
"0","    "
"0","    #(b) Assign each observation to the cluster whose centroid is "
"0","    #closest (where closest is defined using Euclidean distance)."
"0","    print(paste(""Round:"",count))"
"0","    for (i in 1:nobs)"
"0","    {"
"0","      clt[i] = closest(obs[i,],cent)"
"0","      if(clt[i] != oldclt[i])"
"0","      {"
"0","        changed <- TRUE"
"0","      }"
"0","    }    "
"0","    "
"0","    count <- count + 1"
"0","    #print(oldclt)"
"0","    #print(clt)"
"0","    "
"0","  }"
"0","  print(paste(""Algorithm converged, total rounds: "", count))"
"0","  return (list(cent,clt))"
"0","}"
