#draw two samples from the two distributions
s2 <- rmvnorm(10, mean=my2, sigma = sigma)
cls <- seq(0,length(s2))
for(i in 1:length(s2))
{
(LinDist(s2[i], density1, density2,xgrid))
}
#draw two samples from the two distributions
s2 <- rmvnorm(10, mean=my2, sigma = sigma)
cls <- seq(0,length(s2))
for(i in 1:length(s2))
{
cls[i]<- LinDist(s2[i], density1, density2,xgrid)
}
#draw two samples from the two distributions
s2 <- rmvnorm(10, mean=my2, sigma = sigma)
cls <- ""
for(i in 1:length(s2))
{
cls[i]<- LinDist(s2[i], density1, density2,xgrid)
}
#draw two samples from the two distributions
s2 <- rmvnorm(10, mean=my2, sigma = sigma)
for(i in 1:length(s2))
{
cls[i]<- LinDist(s2[i], density1, density2,xgrid)
}
#draw two samples from the two distributions
s2 <- rmvnorm(10, mean=my2, sigma = sigma)
for(i in 1:length(s2))
{
cls2[i]<- LinDist(s2[i], density1, density2,xgrid)
}
#draw two samples from the two distributions
for(i in 1:10)
{
s2 <- rmvnorm(1, mean=my2, sigma = sigma)
(LinDist(s2, density1, density2,xgrid))
}
#draw two samples from the two distributions
c <- c()
for(i in 1:10)
{
s2 <- rmvnorm(1, mean=my2, sigma = sigma)
c<- c(c, LinDist(s2, density1, density2,xgrid))
}
c
#draw two samples from the two distributions
c1 <- c()
c2 <- c()
for(i in 1:10)
{
s2 <- rmvnorm(1, mean=my2, sigma = sigma)
c1<- c(c1, LinDist(s2, density1, density2,xgrid))
c2<- c(c2, LinDist(s2, density1, density2,xgrid))
}
c1
c2
#draw two samples from the two distributions
c1 <- c()
c2 <- c()
for(i in 1:10)
{
s2 <- rmvnorm(1, mean=my2, sigma = sigma)
c1<- c(c1, LinDist(s2, density1, density2,xgrid))
c2<- c(c2, LinDist(s2, density2, density1,xgrid))
}
c1
c2
#draw two samples from the two distributions
c1 <- c()
c2 <- c()
for(i in 1:10)
{
s2 <- rmvnorm(1, mean=my2, sigma = sigma)
c1<- c(c1, LinDist(s2, density1, density2,xgrid))
c2<- c(c2, LinDist(s2, density2, density1,xgrid))
}
c1 < 0.5
#draw two samples from the two distributions
c1 <- c()
c2 <- c()
for(i in 1:10)
{
s2 <- rmvnorm(1, mean=my2, sigma = sigma)
c1<- c(c1, LinDist(s2, density1, density2,xgrid))
c2<- c(c2, LinDist(s2, density2, density1,xgrid))
}
which(c1 < 0.5)
#draw two samples from the two distributions
c1 <- c()
c2 <- c()
for(i in 1:100)
{
s2 <- rmvnorm(1, mean=my2, sigma = sigma)
c1<- c(c1, LinDist(s2, density1, density2,xgrid))
c2<- c(c2, LinDist(s2, density2, density1,xgrid))
}
which(c1 < 0.5)
#draw two samples from the two distributions
c1 <- c()
c2 <- c()
for(i in 1:100)
{
s2 <- rmvnorm(1, mean=my2, sigma = sigma)
c1<- c(c1, LinDist(s2, density1, density2,xgrid))
c2<- c(c2, LinDist(s2, density2, density1,xgrid))
}
sum(c1 < 0.5)/100
#Distribution 3:
#create grid
#create the joint distribution on the grid
corr = c(4.0, sqrt(6), sqrt(6), 5.5)
sigma3 <- matrix(corr,nrow=2, ncol=2)
my3 = c(2,1)
#use function dmvnorm of library mvtnorm
#library(mvtnorm)
density3 <- dmvnorm(grid, mean=my3, sigma = sigma3)
density3 <- matrix(density3, nrow=41, ncol=41)
f3 <- density3
lindist = 0.5*f1/(0.5*f1 + 0.5*f3)
contour(xgrid, ygrid, lindist)
#Distribution 3:
#create grid
#create the joint distribution on the grid
corr = c(4.0, sqrt(6), sqrt(6), 5.5)
sigma3 <- matrix(corr,nrow=2, ncol=2)
my3 = c(2,1)
#use function dmvnorm of library mvtnorm
#library(mvtnorm)
density3 <- dmvnorm(grid, mean=my3, sigma = sigma3)
density3 <- matrix(density3, nrow=41, ncol=41)
f3 <- density3
lindist = 0.5*f1/(0.5*f1 + 0.5*f3)
image(xgrid, ygrid, lindist)
(3 points) Recall that the p-dimensional multivariate Gaussian distribution is defined by a mean vector
µ and a covariance matrix Σ. If X is normal distributed with parameters µ and Σ, then Σ contains the
covariance of each pair of components of X, i.e.,
$$
Cov(Xr, Xs) = E[(Xr − µ_r)(X_s − µ_s)] = Σ_{rs} = Σ_{sr}
$$
for all $1 ≤ r, s ≤ p$. The diagonal terms $Σ_{rr}$ are called variances. Recall further that the correlation
coefficient is defined as
$$
Cor(X_r, X_s) = \frac{Cov(X_r, X_s)}{\sqrt{Cov(X_r, X_r) Cov(X_s, X_s)}}
$$
Consider the bivariate case p = 2, and let both variables have mean zero, µ = (0, 0). Let the variance of
X1 be 2.0 and the variance of X2 be 3.0. Given these constraints, find Σ such that Cor(X1, X2) = −0.75.
$$
Cov(X_1, X_1) = 2.0\\
Cov(X_2, X_2) = 3.0\\
Cor(X_1, X_2) = \frac{Cov(X_1, X_2)}{\sqrt{Cov(X_1, X_1) Cov(X_2, X_2)}}=\frac{Cov(X_1,X_2)}{\sqrt{2.0\cdot3.0}}=-0.75\\
<=>\\
Cov(X_1, X_2) = -0.75\sqrt{6}\approx-1.837\\
$$
$$
\sum_{X_1X_2}=\begin{bmatrix}
Cov(X_1, X_1) & Cov(X_1, X_2)\\
Cov(X_2, X_1) & Cov(X_2, X_2)\\
\end{bmatrix}
=\begin{bmatrix}
2.0 & -0.75\sqrt{6}\\
-0.75\sqrt{6} & 3.0\\
\end{bmatrix}
$$
Draw n = 200 data points from the normal distribution N (µ, Σ) with the obtained parameters, and
evaluate the empirical covariance matrix, Σ, and the empirical correlation between ˆ X1 and X2.
Hint: The R functions $mvrnorm$ (from library MASS), cov, and cor should do the job. You should observe
that the empirical and exact values are somewhat close but not exactly the same.
```{r}
library(MASS)
corr = c(2.0, -0.75*sqrt(6), -0.75*sqrt(6), 3.0)
sigma <- matrix(corr,nrow=2, ncol=2)
sample <- mvrnorm(200,c(0,0), Sigma = sigma)
x = sample [,1]
y = sample [,2]
```
Empirical covariance matrix of sample data:
```{r}
cov(sample)
```
Empirical correlation of $X_1$ and $X_2$:
```{r}
cor(x,y)
```
b) (3 points) Create a scatter plot of the n = 200 points you sampled. Also use the function kde2d to obtain
an estimate of the data density and visualize the density using functions such as contour, image, and
persp.
Hint: Feel free to find more information about the usage of the R graphics functions online: see also
subsection 2.3.2 of the “Introduction to R” Lab in the textbook. Each of the last three functions can take
the output of kde2d directly as their argument. Study the scatter plot and the visualizations, and try to
get a feeling on how they reflect the parameters µ and Σ. Try changing the parameters and repeat to see
the effect. You can also increase or decrease the sample size.
```{r}
plot(x,y, main="Sample data", xlab="x", ylab="y")
```
```{r}
f1 <- kde2d(x,y,n=20)
contour(f1)
```
```{r}
image(f1)
```
```{r}
persp(f1, theta=45, phi=35)
```
(d) (3 points) Here comes the challenge. (But don’t give up: you’re almost there! You should really consider
working together with other students to solve hard exercises like this one.)
Denote the mean vector in items (a)–(c) by µ1 = (0, 0), and let µ2 = (2, 1). Compute the density at the
same set of grid points as in item (c) under distribution N (µ2, Σ), i.e., with a different mean but the same
covariance matrix.
Denote the two densities by fi(x) = N (x ; µi
, Σ), i ∈ { 1, 2 }. Calculate the ratio
p(Y = 1 | x) = f1(x)π1
f1(x)π1 + f2(x)π2
,
with π1 = π2 = 1/2. We will later learn that this is in fact a linear discriminant. Or to be more precise,
this is the posterior probability of class Y = 1 given x.
Visualize the decision boundary using, e.g., contour. As the name suggests, you should get a linear
boundary. If you like, you can now try how well your classifier works by drawing data from either class
and evaluating the above formula. What happens if you use different covariance matrices Σ1 and Σ2?
library(MASS)
corr = c(2.0, -0.75*sqrt(6), -0.75*sqrt(6), 3.0)
sigma <- matrix(corr,nrow=2, ncol=2)
sample <- mvrnorm(200,c(0,0), Sigma = sigma)
x = sample [,1]
y = sample [,2]
cov(sample)
cor(x,y)
library(MASS)
corr = c(2.0, -0.75*sqrt(6), -0.75*sqrt(6), 3.0)
sigma <- matrix(corr,nrow=2, ncol=2)
sample <- mvrnorm(200,c(0,0), Sigma = sigma)
x = sample [,1]
y = sample [,2]
cov(sample)
cor(x,y)
plot(x,y, main="Sample data", xlab="x", ylab="y")
f1 <- kde2d(x,y,n=20)
contour(f1)
image(f1)
persp(f1, theta=45, phi=35)
#create grid
xgrid <- .25*(-20:20)
ygrid <- .25*(-20:20)
grid <- expand.grid(xgrid, ygrid)
#create the joint distribution on the grid
corr = c(2.0, -0.75*sqrt(6), -0.75*sqrt(6), 3.0)
sigma <- matrix(corr,nrow=2, ncol=2)
my1 = c(0,0)
#use function dmvnorm of library mvtnorm
library(mvtnorm)
density1 <- dmvnorm(grid, mean=my1, sigma = sigma)
density1 <- matrix(density, nrow=41, ncol=41)
#draw the distribution
par(mfrow=c(2,2))
contour(xgrid, ygrid, density1)
image(xgrid, ygrid, density1)
persp(xgrid, ygrid, density1)
#Distribution 2:
#create grid
xgrid <- .25*(-20:20)
ygrid <- .25*(-20:20)
grid <- expand.grid(xgrid, ygrid)
#create the joint distribution on the grid
corr = c(2.0, -0.75*sqrt(6), -0.75*sqrt(6), 3.0)
sigma <- matrix(corr,nrow=2, ncol=2)
my2 = c(2,1)
#use function dmvnorm of library mvtnorm
#library(mvtnorm)
density2 <- dmvnorm(grid, mean=my2, sigma = sigma)
density2 <- matrix(density2, nrow=41, ncol=41)
#draw the distribution
par(mfrow=c(1,2))
contour(xgrid, ygrid, density1)
contour(xgrid, ygrid, density2)
par(mfrow=c(1,2))
persp(xgrid, ygrid, density1)
persp(xgrid, ygrid, density2)
par(mfrow=c(1,2))
image(xgrid, ygrid, density1)
image(xgrid, ygrid, density2)
f1 <- density1
f2 <- density2
lindist = 0.5*f1/(0.5*f1 + 0.5*f2)
image(xgrid, ygrid, lindist)
#Distribution 3:
#create grid
#create the joint distribution on the grid
corr = c(4.0, sqrt(6), sqrt(6), 5.5)
sigma3 <- matrix(corr,nrow=2, ncol=2)
my3 = c(2,1)
#use function dmvnorm of library mvtnorm
#library(mvtnorm)
density3 <- dmvnorm(grid, mean=my3, sigma = sigma3)
density3 <- matrix(density3, nrow=41, ncol=41)
f3 <- density3
lindist = 0.5*f1/(0.5*f1 + 0.5*f3)
image(xgrid, ygrid, lindist)
library(MASS)
corr = c(2.0, -0.75*sqrt(6), -0.75*sqrt(6), 3.0)
sigma <- matrix(corr,nrow=2, ncol=2)
sample <- mvrnorm(200,c(0,0), Sigma = sigma)
x = sample [,1]
y = sample [,2]
cov(sample)
cor(x,y)
plot(x,y, main="Sample data", xlab="x", ylab="y")
f1 <- kde2d(x,y,n=20)
contour(f1)
image(f1)
persp(f1, theta=45, phi=35)
#create grid
xgrid <- .25*(-20:20)
ygrid <- .25*(-20:20)
grid <- expand.grid(xgrid, ygrid)
#create the joint distribution on the grid
corr = c(2.0, -0.75*sqrt(6), -0.75*sqrt(6), 3.0)
sigma <- matrix(corr,nrow=2, ncol=2)
my1 = c(0,0)
#use function dmvnorm of library mvtnorm
library(mvtnorm)
density1 <- dmvnorm(grid, mean=my1, sigma = sigma)
density1 <- matrix(density, nrow=41, ncol=41)
#draw the distribution
par(mfrow=c(2,2))
contour(xgrid, ygrid, density1)
image(xgrid, ygrid, density1)
persp(xgrid, ygrid, density1)
#Distribution 2:
#create grid
xgrid <- .25*(-20:20)
ygrid <- .25*(-20:20)
grid <- expand.grid(xgrid, ygrid)
#create the joint distribution on the grid
corr = c(2.0, -0.75*sqrt(6), -0.75*sqrt(6), 3.0)
sigma <- matrix(corr,nrow=2, ncol=2)
my2 = c(2,1)
#use function dmvnorm of library mvtnorm
#library(mvtnorm)
density2 <- dmvnorm(grid, mean=my2, sigma = sigma)
density2 <- matrix(density2, nrow=41, ncol=41)
#draw the distribution
par(mfrow=c(1,2))
contour(xgrid, ygrid, density1)
contour(xgrid, ygrid, density2)
library(MASS)
corr = c(2.0, -0.75*sqrt(6), -0.75*sqrt(6), 3.0)
sigma <- matrix(corr,nrow=2, ncol=2)
sample <- mvrnorm(200,c(0,0), Sigma = sigma)
x = sample [,1]
y = sample [,2]
cov(sample)
cor(x,y)
plot(x,y, main="Sample data", xlab="x", ylab="y")
f1 <- kde2d(x,y,n=20)
contour(f1)
image(f1)
persp(f1, theta=45, phi=35)
#create grid
xgrid <- .25*(-20:20)
ygrid <- .25*(-20:20)
grid <- expand.grid(xgrid, ygrid)
#create the joint distribution on the grid
corr = c(2.0, -0.75*sqrt(6), -0.75*sqrt(6), 3.0)
sigma <- matrix(corr,nrow=2, ncol=2)
my1 = c(0,0)
#use function dmvnorm of library mvtnorm
library(mvtnorm)
density1 <- dmvnorm(grid, mean=my1, sigma = sigma)
density1 <- matrix(density, nrow=41, ncol=41)
#draw the distribution
par(mfrow=c(2,2))
contour(xgrid, ygrid, density1)
image(xgrid, ygrid, density1)
persp(xgrid, ygrid, density1)
#Distribution 2:
#create grid
xgrid <- .25*(-20:20)
ygrid <- .25*(-20:20)
grid <- expand.grid(xgrid, ygrid)
#create the joint distribution on the grid
corr = c(2.0, -0.75*sqrt(6), -0.75*sqrt(6), 3.0)
sigma <- matrix(corr,nrow=2, ncol=2)
my2 = c(2,1)
#use function dmvnorm of library mvtnorm
#library(mvtnorm)
density2 <- dmvnorm(grid, mean=my2, sigma = sigma)
density2 <- matrix(density2, nrow=41, ncol=41)
#draw the distribution
par(mfrow=c(1,2))
contour(xgrid, ygrid, density1)
contour(xgrid, ygrid, density2)
par(mfrow=c(1,2))
persp(xgrid, ygrid, density1)
persp(xgrid, ygrid, density2)
par(mfrow=c(1,2))
image(xgrid, ygrid, density1)
image(xgrid, ygrid, density2)
f1 <- density1
f2 <- density2
lindist = 0.5*f1/(0.5*f1 + 0.5*f2)
image(xgrid, ygrid, lindist)
#Distribution 3:
#create grid
#create the joint distribution on the grid
corr = c(4.0, sqrt(6), sqrt(6), 5.5)
sigma3 <- matrix(corr,nrow=2, ncol=2)
my3 = c(2,1)
#use function dmvnorm of library mvtnorm
#library(mvtnorm)
density3 <- dmvnorm(grid, mean=my3, sigma = sigma3)
density3 <- matrix(density3, nrow=41, ncol=41)
f3 <- density3
lindist = 0.5*f1/(0.5*f1 + 0.5*f3)
image(xgrid, ygrid, lindist)
LinDist <- function(point, density1, density2,grid)
{
px = which.min(abs(point[1] - grid))
py = which.min(abs(point[2] - grid))
f1 <- density1[px,py]
f2 <- density2[px,py]
return (0.5*f1/(0.5*f1 + 0.5*f2))
}
library(MASS)
corr = c(2.0, -0.75*sqrt(6), -0.75*sqrt(6), 3.0)
sigma <- matrix(corr,nrow=2, ncol=2)
sample <- mvrnorm(200,c(0,0), Sigma = sigma)
x = sample [,1]
y = sample [,2]
cov(sample)
cor(x,y)
plot(x,y, main="Sample data", xlab="x", ylab="y")
f1 <- kde2d(x,y,n=20)
contour(f1)
image(f1)
persp(f1, theta=45, phi=35)
#create grid
xgrid <- .25*(-20:20)
ygrid <- .25*(-20:20)
grid <- expand.grid(xgrid, ygrid)
#create the joint distribution on the grid
corr = c(2.0, -0.75*sqrt(6), -0.75*sqrt(6), 3.0)
sigma <- matrix(corr,nrow=2, ncol=2)
my1 = c(0,0)
#use function dmvnorm of library mvtnorm
library(mvtnorm)
density1 <- dmvnorm(grid, mean=my1, sigma = sigma)
density1 <- matrix(density, nrow=41, ncol=41)
#draw the distribution
par(mfrow=c(2,2))
contour(xgrid, ygrid, density1)
image(xgrid, ygrid, density1)
persp(xgrid, ygrid, density1)
#Distribution 2:
#create grid
xgrid <- .25*(-20:20)
ygrid <- .25*(-20:20)
grid <- expand.grid(xgrid, ygrid)
#create the joint distribution on the grid
corr = c(2.0, -0.75*sqrt(6), -0.75*sqrt(6), 3.0)
sigma <- matrix(corr,nrow=2, ncol=2)
my2 = c(2,1)
#use function dmvnorm of library mvtnorm
#library(mvtnorm)
density2 <- dmvnorm(grid, mean=my2, sigma = sigma)
density2 <- matrix(density2, nrow=41, ncol=41)
#draw the distribution
par(mfrow=c(1,2))
contour(xgrid, ygrid, density1)
contour(xgrid, ygrid, density2)
par(mfrow=c(1,2))
persp(xgrid, ygrid, density1)
persp(xgrid, ygrid, density2)
par(mfrow=c(1,2))
image(xgrid, ygrid, density1)
image(xgrid, ygrid, density2)
f1 <- density1
f2 <- density2
lindist = 0.5*f1/(0.5*f1 + 0.5*f2)
image(xgrid, ygrid, lindist)
#Distribution 3:
#create grid
#create the joint distribution on the grid
corr = c(4.0, sqrt(6), sqrt(6), 5.5)
sigma3 <- matrix(corr,nrow=2, ncol=2)
my3 = c(2,1)
#use function dmvnorm of library mvtnorm
#library(mvtnorm)
density3 <- dmvnorm(grid, mean=my3, sigma = sigma3)
density3 <- matrix(density3, nrow=41, ncol=41)
f3 <- density3
lindist = 0.5*f1/(0.5*f1 + 0.5*f3)
image(xgrid, ygrid, lindist)
LinDist <- function(point, density1, density2,grid)
{
px = which.min(abs(point[1] - grid))
py = which.min(abs(point[2] - grid))
f1 <- density1[px,py]
f2 <- density2[px,py]
return (0.5*f1/(0.5*f1 + 0.5*f2))
}
#draw two samples from the two distributions
c1 <- c()
c2 <- c()
for(i in 1:100)
{
s2 <- rmvnorm(1, mean=my2, sigma = sigma)
c1<- c(c1, LinDist(s2, density1, density2,xgrid))
c2<- c(c2, LinDist(s2, density2, density1,xgrid))
}
sum(c1 < 0.5)/100
